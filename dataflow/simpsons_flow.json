{
	"name": "simpsons_flow",
	"properties": {
		"folder": {
			"name": "ClaseDF2/Simpsons"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "entrada_characters2",
						"type": "DatasetReference"
					},
					"name": "entradacharacters2"
				},
				{
					"dataset": {
						"referenceName": "entrada_episodes2",
						"type": "DatasetReference"
					},
					"name": "entradaepisode2"
				},
				{
					"dataset": {
						"referenceName": "entrada_locations2",
						"type": "DatasetReference"
					},
					"name": "entradalocations2"
				},
				{
					"name": "entradascripts2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SalidaCharacters2",
						"type": "DatasetReference"
					},
					"name": "salidacharacters"
				},
				{
					"dataset": {
						"referenceName": "SalidaJoin",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "selectcharacters"
				},
				{
					"name": "filtrogeneronull"
				},
				{
					"name": "selectepisodes"
				},
				{
					"name": "selectlocations"
				},
				{
					"name": "selectscripts"
				},
				{
					"name": "episodesscripts"
				},
				{
					"name": "episodescriptslocations"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          normalized_name as string,",
				"          gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> entradacharacters2",
				"source(output(",
				"          id as integer,",
				"          image_url as string,",
				"          imdb_rating as integer,",
				"          imdb_votes as integer,",
				"          number_in_season as string,",
				"          number_in_series as integer,",
				"          original_air_date as date,",
				"          original_air_year as integer,",
				"          production_code as string,",
				"          season as integer,",
				"          title as string,",
				"          us_viewers_in_millions as string,",
				"          video_url as string,",
				"          views as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> entradaepisode2",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          normalized_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> entradalocations2",
				"source(output(",
				"          id as integer,",
				"          episode_id as integer,",
				"          number as string,",
				"          raw_text as string,",
				"          timestamp_in_ms as string,",
				"          speaking_line as string,",
				"          character_id as integer,",
				"          location_id as integer,",
				"          raw_character_text as string,",
				"          raw_location_text as string,",
				"          spoken_words as string,",
				"          normalized_text as string,",
				"          word_count as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> entradascripts2",
				"entradacharacters2 select(mapColumn(",
				"          id,",
				"          name = normalized_name,",
				"          gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcharacters",
				"selectcharacters filter(gender!=\"Null\") ~> filtrogeneronull",
				"entradaepisode2 select(mapColumn(",
				"          id,",
				"          number_in_season,",
				"          number_in_series,",
				"          original_air_date,",
				"          original_air_year,",
				"          production_code,",
				"          season,",
				"          title,",
				"          video_url,",
				"          views",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectepisodes",
				"entradalocations2 select(mapColumn(",
				"          id,",
				"          name = normalized_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectlocations",
				"entradascripts2 select(mapColumn(",
				"          id,",
				"          episode_id,",
				"          number,",
				"          raw_text,",
				"          timestamp_in_ms,",
				"          speaking_line,",
				"          character_id,",
				"          location_id,",
				"          raw_character_text,",
				"          raw_location_text,",
				"          spoken_words,",
				"          normalized_text,",
				"          word_count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectscripts",
				"selectepisodes, selectscripts join(selectepisodes@id == episode_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> episodesscripts",
				"episodesscripts, selectlocations join(location_id == selectlocations@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> episodescriptslocations",
				"filtrogeneronull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> salidacharacters",
				"episodescriptslocations sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string,",
				"          Year as integer",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}